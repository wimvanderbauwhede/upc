use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.19
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1187266198',
        'name' => 'slide.css',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $error;
        
        eval { BLOCK: {
    $output .=  "/* BEGIN index.css */\n\nBODY {\n	background: #204A87;\n	color: #EEEEEE;\n        /* font-weight: bold; */\n	font-family: Georgia, DejaVu Serif Condensed;\n	cursor: pointer;\n	    font-size: 48pt;\n}\n\nh1,h3,h4,h5 {font-weight:normal;\nfont-size: 72pt;\ntext-align=center;}\nh2 {font-weight:normal;\nfont-size: 60pt;\ntext-align=center;}\n\nhr {\n    color: #202040;\n    height: 0px;\n    border-top: 0px;\n    border-bottom: 3px #202040 ridge;\n    border-left: 0px;\n    border-right: 0px;\n}\n\na:link {\n    color: #FFFFFF;\n    text-decoration: none;\n}\n\na:visited {\n    color: #FFFFFF;\n    text-decoration: none;\n}\n\na:hover {\n    text-decoration: underline;\n}\n\np,ul,li,body {\n    color: white;\n    font-size: 48pt;\n    margin: 6pt;\n}\n\ndiv p {\n    font-size: 48pt;\n    margin-top: 12pt;\n    margin-bottom: 12pt;\n    margin-left: 6pt;\n    margin-right: 6pt;\n}\n\nsmall {\n    font-size: 24pt;\n    font-style: italic;\n}\n\n#topbar {\n//    background: ";
    #line 62 "template/tt2/slide.css"
    $output .=  $stash->get('banner_bgcolor');
    $output .=  ";\n    color: white;\n    position:absolute;\n    right: 5px;\n    left: 5px;\n    top: 5px;\n    height: 10px;\n}\n\n#bottombar {\n//    background: ";
    #line 72 "template/tt2/slide.css"
    $output .=  $stash->get('banner_bgcolor');
    $output .=  ";\n    color: white;\n    position: fixed;\n    right: 5px;\n    left: 5px;\n    bottom: 5px;\n    height: 10px;\n    z-index: 0;\n}\n\n.top_spacer {\n    height: 0px;\n    margin: 0px 0px 0px 0px;\n    padding: 1px 0px 0px 0px;\n}\n\n.spacer {\n    bottom: 5px;\n    height: 50px;\n}\n\n#content {\n//    background:#ffffff;\n    color: white;\n    margin-left: 80px;\n    margin-right:20px;\n    margin-top: 20px;\n}\n\n#logo {\n    position: fixed;\n    right: 140px;\n    bottom: 51px;\n    width: 130px;\n    height: 150px;\n    z-index:3;\n    background-image: url(";
    #line 108 "template/tt2/slide.css"
    $output .=  $stash->get('images_directory');
    $output .=  "/";
    #line 108 "template/tt2/slide.css"
    $output .=  $stash->get('logo_image');
    $output .=  ");\n    background-repeat: no-repeat;\n}\n\n.formatter_pre {\nfont-size: 36pt;\n}\n\n.s {\n        text-decoration: line-through;\n}\n.iu {\n        text-decoration: underline;\n        font-style: italic;\n}\n.ui {\n/*      text-decoration: underline; */\n        font-style: italic;\n}\n.u {\n        text-decoration: underline;\n}\n.i {\n        font-style: italic;\n        font-family: \"Times New Roman\",\"Bitstream Vera Serif\",serif;\n}\n.c {\n        font-family: Anonymous,Lucida Console,Andale Mono,Bitstream Vera Sans Mono,monospace;\n}\n.cc {\n        font-family: Anonymous,Lucida Console,Andale Mono,Bitstream Vera Sans Mono,monospace;\n        color: #9999ff;\n}\n.fix {\n        font-size:56px;\n}\n.t {\n        font-style: italic;\n}\n.tag {\n        color: #66ff66;\n}\n.att {\n        color: #9999ff;\n}\n.key {\n        color: #99ffff;\n}\n\n.str {\n        color: #ff9999;\n}\n\n.hide { color: #204A87; }\n.hid {\n        color: #999999;\n}\n.hidt {\n        color: #999999;\n        font-style: italic;\n}\n.pre {\n        font-family: Anonymous,Lucida Console,Andale Mono,Bitstream Vera Sans Mono,monospace;\n        padding-bottom: 8px;\n}\n/* END index.css */\n";
        } };
        if ($@) {
            $error = $context->catch($@, \$output);
            die $error unless $error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
